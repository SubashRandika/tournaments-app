{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport classnames from 'classnames';\nimport classNameToStyleName from './classNameToStyleName';\nimport { baseThemeStyleName, flagIconClassesPrefix, flagIconClassesPrefixName } from './constants';\nexport var makeClassesObject = function makeClassesObject(props, options) {\n  var _ref;\n\n  var code = props.code,\n      _props$flip = props.flip,\n      flip = _props$flip === void 0 ? '' : _props$flip,\n      _props$size = props.size,\n      size = _props$size === void 0 ? '' : _props$size,\n      _props$squared = props.squared,\n      squared = _props$squared === void 0 ? false : _props$squared,\n      rotate = props.rotate,\n      className = props.className,\n      styleName = props.styleName;\n  var themeStyles = options.themeStyles,\n      useCssModules = options.useCssModules;\n  return _ref = {}, _defineProperty(_ref, flagIconClassesPrefixName, true), _defineProperty(_ref, \"\".concat(flagIconClassesPrefix, \"squared\"), squared), _defineProperty(_ref, \"\".concat(flagIconClassesPrefix).concat(size), size), _defineProperty(_ref, \"\".concat(flagIconClassesPrefix).concat(code), code), _defineProperty(_ref, \"\".concat(flagIconClassesPrefix, \"flip-\").concat(flip), flip), _defineProperty(_ref, \"\".concat(flagIconClassesPrefix, \"rotate-\").concat(rotate || ''), rotate), _defineProperty(_ref, baseThemeStyleName, useCssModules && themeStyles && themeStyles[baseThemeStyleName]), _defineProperty(_ref, styleName || '', useCssModules && themeStyles && styleName && themeStyles[styleName]), _defineProperty(_ref, className || '', className), _ref;\n};\nexport default (function (props, options, styles) {\n  var useCssModules = options.useCssModules;\n  var classesObject = makeClassesObject(props, options);\n  var strClasses = classnames(classesObject);\n\n  if (useCssModules) {\n    var className = props.className;\n    var aClasses = strClasses.split(' ');\n    var nClasses = aClasses.length;\n    strClasses = aClasses.map(function (c, i) {\n      if (className && i === nClasses - 1) return c;\n      return classNameToStyleName(c, styles || {});\n    }).join(' ');\n  }\n\n  return strClasses;\n});","map":null,"metadata":{},"sourceType":"module"}