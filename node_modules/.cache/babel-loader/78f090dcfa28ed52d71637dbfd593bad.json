{"ast":null,"code":"import axios from 'axios';\nimport jsonServerConfig from '../../src/configurations/json-server';\n\nclass TournamentService {\n  constructor() {\n    const host = jsonServerConfig.host,\n          port = jsonServerConfig.port;\n    this.url = \"http://\".concat(host, \":\").concat(port);\n    this.tournamentsUrl = \"\".concat(this.url, \"/tournaments\");\n  }\n\n  async getAllTournaments() {\n    axios.get(this.tournamentsUrl).then(res => {\n      return new Promise((resolve, reject) => {\n        res;\n      });\n    }).catch(err => {\n      return Promise.reject(err);\n    });\n  }\n\n  async getTournamentById(tournamentId) {\n    const tournamentUrl = \"\".concat(this.tournamentsUrl, \"/\").concat(tournamentId);\n    axios.get(tournamentUrl).then(res => {\n      return Promise.resolve(res.data);\n    }).catch(err => {\n      return Promise.reject(err);\n    });\n  }\n\n  async getFilteredTournaments(filterField, inputValue) {\n    const filterUrl = \"\".concat(this.tournamentsUrl, \"?series.\").concat(filterField, \"_like=\").concat(inputValue);\n    axios.get(filterUrl).then(res => {\n      return Promise.resolve(res.data);\n    }).catch(err => {\n      return Promise.reject(err);\n    });\n  }\n\n}\n\nexport default TournamentService;","map":{"version":3,"sources":["D:\\Coding Challenges\\BAYES\\tournaments-app\\src\\services\\tournamentService.js"],"names":["axios","jsonServerConfig","TournamentService","constructor","host","port","url","tournamentsUrl","getAllTournaments","get","then","res","Promise","resolve","reject","catch","err","getTournamentById","tournamentId","tournamentUrl","data","getFilteredTournaments","filterField","inputValue","filterUrl"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;;AAEA,MAAMC,iBAAN,CAAwB;AACvBC,EAAAA,WAAW,GAAG;AAAA,UACLC,IADK,GACUH,gBADV,CACLG,IADK;AAAA,UACCC,IADD,GACUJ,gBADV,CACCI,IADD;AAEb,SAAKC,GAAL,oBAAqBF,IAArB,cAA6BC,IAA7B;AACA,SAAKE,cAAL,aAAyB,KAAKD,GAA9B;AACA;;AAED,QAAME,iBAAN,GAA0B;AACzBR,IAAAA,KAAK,CACHS,GADF,CACM,KAAKF,cADX,EAEEG,IAFF,CAEQC,GAAD,IAAS;AACd,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvCH,QAAAA,GAAG;AACH,OAFM,CAAP;AAGA,KANF,EAOEI,KAPF,CAOSC,GAAD,IAAS;AACf,aAAOJ,OAAO,CAACE,MAAR,CAAeE,GAAf,CAAP;AACA,KATF;AAUA;;AAED,QAAMC,iBAAN,CAAwBC,YAAxB,EAAsC;AACrC,UAAMC,aAAa,aAAM,KAAKZ,cAAX,cAA6BW,YAA7B,CAAnB;AACAlB,IAAAA,KAAK,CACHS,GADF,CACMU,aADN,EAEET,IAFF,CAEQC,GAAD,IAAS;AACd,aAAOC,OAAO,CAACC,OAAR,CAAgBF,GAAG,CAACS,IAApB,CAAP;AACA,KAJF,EAKEL,KALF,CAKSC,GAAD,IAAS;AACf,aAAOJ,OAAO,CAACE,MAAR,CAAeE,GAAf,CAAP;AACA,KAPF;AAQA;;AAED,QAAMK,sBAAN,CAA6BC,WAA7B,EAA0CC,UAA1C,EAAsD;AACrD,UAAMC,SAAS,aAAM,KAAKjB,cAAX,qBAAoCe,WAApC,mBAAwDC,UAAxD,CAAf;AACAvB,IAAAA,KAAK,CACHS,GADF,CACMe,SADN,EAEEd,IAFF,CAEQC,GAAD,IAAS;AACd,aAAOC,OAAO,CAACC,OAAR,CAAgBF,GAAG,CAACS,IAApB,CAAP;AACA,KAJF,EAKEL,KALF,CAKSC,GAAD,IAAS;AACf,aAAOJ,OAAO,CAACE,MAAR,CAAeE,GAAf,CAAP;AACA,KAPF;AAQA;;AA1CsB;;AA6CxB,eAAed,iBAAf","sourcesContent":["import axios from 'axios';\r\nimport jsonServerConfig from '../../src/configurations/json-server';\r\n\r\nclass TournamentService {\r\n\tconstructor() {\r\n\t\tconst { host, port } = jsonServerConfig;\r\n\t\tthis.url = `http://${host}:${port}`;\r\n\t\tthis.tournamentsUrl = `${this.url}/tournaments`;\r\n\t}\r\n\r\n\tasync getAllTournaments() {\r\n\t\taxios\r\n\t\t\t.get(this.tournamentsUrl)\r\n\t\t\t.then((res) => {\r\n\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\tres\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\treturn Promise.reject(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\tasync getTournamentById(tournamentId) {\r\n\t\tconst tournamentUrl = `${this.tournamentsUrl}/${tournamentId}`;\r\n\t\taxios\r\n\t\t\t.get(tournamentUrl)\r\n\t\t\t.then((res) => {\r\n\t\t\t\treturn Promise.resolve(res.data);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\treturn Promise.reject(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\tasync getFilteredTournaments(filterField, inputValue) {\r\n\t\tconst filterUrl = `${this.tournamentsUrl}?series.${filterField}_like=${inputValue}`;\r\n\t\taxios\r\n\t\t\t.get(filterUrl)\r\n\t\t\t.then((res) => {\r\n\t\t\t\treturn Promise.resolve(res.data);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\treturn Promise.reject(err);\r\n\t\t\t});\r\n\t}\r\n}\r\n\r\nexport default TournamentService;\r\n"]},"metadata":{},"sourceType":"module"}